/*******************************************************************************
 * Copyright (c) 2015 Contributors.
 * All rights reserved. This program and the accompanying materials are made available under
 * the terms of the GNU Lesser General Public
 * License v3.0 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl.html
 ******************************************************************************/

import groovy.json.JsonSlurper

import java.nio.file.Files

//Project data
String dirNatives = "natives/${minecraftVersion}"

//Minecraft data
String minecraftRepo = 'https://s3.amazonaws.com/Minecraft.Download/',
       versionURL = "${minecraftRepo}versions/${minecraftVersion}/"

//Mapping data
String mappingsCommit = 'ad8e6e4e9f3302649d94861be1651015f244f9e3',
	   clientMappingsFile = "../Enigma Mappings/${minecraftVersion}-client.mappings",
	   serverMappingsFile = "../Enigma Mappings/${minecraftVersion}-server.mappings",
	   pathMappingsClient = "conf/${minecraftVersion}.client.mappings",
	   pathMappingsServer = "conf/${minecraftVersion}.server.mappings"

//Client files
String pathClientCleanJar = "${dirLib}/minecraft-${minecraftVersion}-client-clean.jar",
	   pathClientTempJar = "${dirLib}/minecraft-${minecraftVersion}-client-temp.jar",
	   pathClientDeobfJar = "${dirLib}/minecraft-${minecraftVersion}-client-deobf.jar",
	   pathClientSrcJar = "${dirLib}/minecraft-${minecraftVersion}-client-deobf-src.jar"

//Server files
String pathServerCleanJar = "${dirLib}/minecraft-${minecraftVersion}-server-clean.jar",
	   pathServerTempJar = "${dirLib}/minecraft-${minecraftVersion}-server-temp.jar",
	   pathServerDeobfJar = "${dirLib}/minecraft-${minecraftVersion}-server-deobf.jar",
	   pathServerSrcJar = "${dirLib}/minecraft-${minecraftVersion}-server-deobf-src.jar"

configurations {
	procyon
	enigma
	enigma.extendsFrom procyon
	compile.extendsFrom enigma
}

repositories {
	mavenCentral()
	jcenter()
	maven {
		name 'Cuchaz Custom Repository'
		url 'http://maven.cuchazinteractive.com'
	}
}

dependencies {
	procyon 'org.bitbucket.mstrobel:procyon-core:0.5.29',
			'org.bitbucket.mstrobel:procyon-reflection:0.5.29',
			'org.bitbucket.mstrobel:procyon-compilertools:0.5.29',
			'org.bitbucket.mstrobel:procyon-expressions:0.5.29'
	enigma module("cuchaz:enigma-lib:${enigmaVersion}") {
		dependency('com.google.guava:guava:18.0')
		dependency('org.javassist:javassist:3.19.0-GA')
	}
}

task downloadNatives() << {
	println "Downloading libraries from ${versionURL}${minecraftVersion}.json..."
	download("${project.tasks.downloadNatives.temporaryDir}/version.json", "${versionURL}${minecraftVersion}.json")

	def jsonSlurper = new JsonSlurper()
	def root = jsonSlurper.parse(new File("${project.tasks.downloadNatives.temporaryDir}/version.json"))
	assert root instanceof Map
	assert root.libraries instanceof List
	root.libraries.each {
		assert it.name instanceof String
		assert it.rules instanceof List || it.rules == null
		assert it.natives instanceof Map || it.natives == null

		String location = it.name
		String natives = parseNatives it

		if (parseRules(it)) {
			String packagePath = location.split(':')[0]
			String name = location.split(':')[1]
			String version = location.split(':')[2]
			String arch = System.getProperty('os.arch')

			String downloadURL = "https://libraries.minecraft.net/${packagePath.replace('.', '/')}/${name}/${version}/${name}-${version}"
			if (natives == '?') {
				download("${dirNatives}/${name}-${version}.jar", "${downloadURL}.jar")
			} else {
				if (!download("${dirNatives}/${name}-${version}-${natives}-${arch}.jar", "${downloadURL}-${natives}-${arch}.jar")) {
					download("${dirNatives}/${name}-${version}-${natives}.jar", "${downloadURL}-${natives}.jar")
				}
			}
		}
	}
}
downloadNatives {
	group = 'Minecraft'
	description = 'Downloads needed natives for specified Minecraft version'
	outputs.upToDateWhen {false}
}

task getClientMappings << {
	if (clientMappingsFile != null && new File(clientMappingsFile).isFile()) {
		Files.copy(new File(clientMappingsFile).toPath(), new File(pathMappings).newOutputStream())
		println "Read client mappings from ${clientMappingsFile}."
	} else {
		download(pathMappingsClient, "https://bitbucket.org/cuchaz/minecraft-mappings/raw/${mappingsCommit}/${minecraftVersion}-client.mappings")
		println "Wrote client mappings to ${pathMappings}"
	}
}
getClientMappings {
	group = 'M3L'
	description = 'Finds or downloads client mappings for specified version'
	outputs.upToDateWhen {false}
}

task getServerMappings << {
	if (serverMappingsFile != null && new File(serverMappingsFile).isFile()) {
		Files.copy(new File(serverMappingsFile).toPath(), new File(pathMappings).newOutputStream())
		println "Read server mappings from ${serverMappingsFile}."
	} else {
		download(pathMappingsServer, "https://bitbucket.org/cuchaz/minecraft-mappings/raw/${mappingsCommit}/${minecraftVersion}-server.mappings")
		println "Wrote server mappings to ${pathMappings}"
	}
}
getServerMappings {
	group = 'M3L'
	description = 'Finds or downloads server mappings for specified version'
	outputs.upToDateWhen { false }
}

task deobfMinecraftClient(dependsOn: getClientMappings, type: Jar) << {
	download(pathClientCleanJar, "${versionURL}${minecraftVersion}.jar")
	println "Deobfuscating ${pathClientTempJar}..."
	javaexec {
		classpath = configurations.enigma
		main = 'cuchaz.enigma.CommandMain'
		args = ['deobfuscate', pathClientCleanJar, pathClientTempJar, pathMappingsClient]
	}
	println "Wrote ${pathClientTempJar}."
	println "Publifying ${pathClientTempJar}..."
	javaexec {
		classpath = configurations.enigma
		main = 'cuchaz.enigma.CommandMain'
		args = ['publify', pathClientTempJar, pathClientDeobfJar]
	}
	println "Wrote ${pathClientDeobfJar}."
	println "Decompiling ${pathClientDeobfJar}..."
	File tmp = tasks.deobfMinecraftClient.temporaryDir
	tmp.mkdir()
	String tmpPath = tmp.getPath()
	javaexec {
		classpath = configurations.enigma
		main = 'cuchaz.enigma.CommandMain'
		args = ['decompile', pathClientTempJar, tmpPath]
	}
	//TODO: Fix jar not generating bug?
	jar {
		from tasks.deobfMinecraftClient.temporaryDir
		destinationDir = '.'
		archiveName = pathClientSrcJar
	}
	println "Wrote ${pathClientSrcJar}."
}
deobfMinecraftClient {
	group = 'Minecraft'
	description = 'Downloads, deobfuscates Minecraft client sources and generates corresponding and source jars'
	outputs.upToDateWhen {false}
}

task deobfMinecraftServer(dependsOn: getServerMappings, type: Jar) << {
	download(pathServerCleanJar, "${versionURL}minecraft_server.${minecraftVersion}.jar")
	println "Deobfuscating ${pathServerTempJar}..."
	javaexec {
		classpath = configurations.enigma
		main = 'cuchaz.enigma.CommandMain'
		args = ['deobfuscate', pathServerCleanJar, pathServerTempJar, pathMappingsServer]
	}
	println "Wrote ${pathServerTempJar}."
	println "Publifying ${pathServerTempJar}..."
	javaexec {
		classpath = configurations.enigma
		main = 'cuchaz.enigma.CommandMain'
		args = ['publify', pathServerTempJar, pathServerDeobfJar]
	}
	println "Wrote ${pathServerDeobfJar}."
	println "Decompiling ${pathServerDeobfJar}..."
	File tmp = tasks.deobfMinecraftServer.temporaryDir
	tmp.mkdir()
	String tmpPath = tmp.getPath()
	javaexec {
		classpath = configurations.enigma
		main = 'cuchaz.enigma.CommandMain'
		args = ['decompile', pathServerTempJar, tmpPath]
	}
	//TODO: Fix jar not generating bug?
	jar {
		from tasks.deobfMinecraftServer.temporaryDir
		destinationDir = '.'
		archiveName = pathServerSrcJar
	}
	println "Wrote ${pathServerSrcJar}."
}
deobfMinecraftServer {
	group = 'Minecraft'
	description = 'Downloads, deobfuscates Minecraft server sources and generates corresponding and source jars'
	outputs.upToDateWhen { false }
}

task setupDevEnv << {
	tasks.downloadNatives.execute()
	tasks.deobfMinecraftClient.execute()
	tasks.deobfMinecraftServer.execute()
}
setupDevEnv{
	group = 'M3L'
	description = 'Sets up complete development environment'
	outputs.upToDateWhen {false}
}

// Helper methods
static parseRules(lib) {
	if (lib.rules) {
		def download = false
		lib.rules.each {rule ->
			if (rule.os) {
				if (rule.os.name == getOs()) {
					download = rule.action == 'allow'
				}
			} else {
				download = rule.action == 'allow'
			}
		}
		download
	} else {
		true
	}
}

static parseNatives(lib) {
	if (lib.natives && getOs() != 'unknown') {
		assert lib.natives instanceof Map
		lib.natives.get(getOs())
	} else {
		'?'
	}
}

static String getOs() {
	switch (System.getProperty('os.name').toLowerCase()) {
		case ~/.*(linux|unix|bsd).*/:
			return 'linux'
		case ~/.*win.*/:
			return 'windows'
		case ~/.*(osx|mac).*/:
			return 'osx'
		default:
			return 'unknown'
	}
}

static boolean download(String filePath, String dependencyURL) {
	try {
		File file = new File(filePath)
		file.getParentFile().mkdirs();
		if (!file.exists()) {
			println "Downloading ${dependencyURL}..."
			new URL(dependencyURL).withInputStream {i -> file.withOutputStream {it << i}}
		}
		return true
	}
	catch (Exception ignored) {
		println 'Download failed!'
	}finally{
		return false
	}
}

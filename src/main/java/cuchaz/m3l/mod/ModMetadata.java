/*******************************************************************************
 * Copyright (c) 2015 Contributors.
 * All rights reserved. This program and the accompanying materials are made available under
 * the terms of the GNU Lesser General Public
 * License v3.0 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl.html
 ******************************************************************************/

package cuchaz.m3l.mod;

import com.google.common.base.Function;
import com.google.common.base.Joiner;
import com.google.common.collect.Lists;
import com.google.gson.Gson;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonWriter;
import cuchaz.m3l.api.versioning.ArtifactData;
import cuchaz.m3l.api.versioning.Version;
import net.minecraftforge.fml.common.ModContainer;

import java.io.*;
import java.util.List;

/**
 * @author Caellian
 */
public class ModMetadata {
    @SerializedName("id")
    public String id;
    @SerializedName("name")
    public String name;
    @SerializedName("description")
    public String description;
    @SerializedName("version")
    public Version version;

    @SerializedName("website")
    public String website = "";
    @SerializedName("updateUrl")
    public String updateUrl = "";

    @SerializedName("logoFile")
    public String logoFile = "";
    @SerializedName("screenshots")
    public String[] screenshots;
    @SerializedName("authors")
    public List<String> authorList = Lists.newArrayList();
    @SerializedName("credits")
    public List<String> credits = Lists.newArrayList();

    public transient ModContainer parentMod;
    public transient List<ModContainer> childMods = Lists.newArrayList();

    public boolean useDependencyInformation;
    @SerializedName("requiredMods")
    public List<ArtifactData> requiredMods = Lists.newArrayList();
    @SerializedName("dependencies")
    public List<ArtifactData> dependencies = Lists.newArrayList();
    @SerializedName("dependants")
    public List<ArtifactData> dependants = Lists.newArrayList();

    /**
     * True if this metadata was automatically generated because mod info file was missing.
     */
    public transient boolean autogenerated;

    public ModMetadata() {
    }

    public static ModMetadata load(File metadataFile) throws FileNotFoundException {
        FileReader jsonFile = new FileReader(metadataFile);
        ModMetadata result = new Gson().fromJson(jsonFile, ModMetadata.class);
        try {
            jsonFile.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return result;
    }

    public void store(File metadataFile) throws IOException {
        FileWriter fileWriter = new FileWriter(metadataFile);
        JsonWriter jsonWriter = new JsonWriter(fileWriter);
        new Gson().toJson(this, this.getClass(), jsonWriter);
        jsonWriter.close();
        fileWriter.close();
    }

    public String getChildModCountString() {
        return String.format("%d child mod%s", childMods.size(), childMods.size() != 1 ? "s" : "");
    }

    public String getAuthorList() {
        return Joiner.on(", ").join(authorList);
    }

    public String getChildModList() {
        return Joiner.on(", ").join(Lists.transform(childMods, new Function<ModContainer, Object>() {
            @Override
            public Object apply(ModContainer input) {
                return input.getName();
            }
        }));
    }

    public String printableSortingRules() {
        return "";
    }
}
